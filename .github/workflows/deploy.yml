name: üöÄ Deploy The Monitor Project

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout repo
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Setup Terraform
      - name: üõ†Ô∏è Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      # Step 3: Setup Ansible
      - name: üõ†Ô∏è Setup Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass

      # Step 4: CREATE terraform.tfvars file
      - name: üìù Create Terraform Variables File
        run: |
          mkdir -p terraform
          cat > terraform/terraform.tfvars << 'EOF'
          vpc_id    = "vpc-0280c538c474724ba"
          subnet_id = "subnet-0955441f00fafb2e7"
          key_name  = "monitor-key"
          EOF
          echo "‚úÖ Created terraform.tfvars:"
          cat terraform/terraform.tfvars
          echo "‚úÖ File exists at:"
          ls -la terraform/terraform.tfvars

      # Step 5: Terraform Init
      - name: üîß Terraform Init
        run: |
          terraform -chdir=terraform init \
            -backend-config="bucket=my-new-terraform-bucket" \
            -backend-config="region=eu-west-2" \
            -backend-config="key=monitor-project/terraform.tfstate"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2

      # Step 6: Terraform Validate
      - name: üîç Terraform Validate
        run: terraform -chdir=terraform validate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2

      # Step 7: Terraform Plan
      - name: üìã Terraform Plan
        run: terraform -chdir=terraform plan -var-file="terraform.tfvars" -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2

      # Step 8: Terraform Apply
      - name: ‚úÖ Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2

      # Step 9: Get EC2 Elastic IP - CORRECTED VERSION
      - name: üìù Get Server IP
        id: get-ip
        run: |
          # Get the raw output and extract only the IP address
          RAW_OUTPUT=$(terraform -chdir=terraform output -raw public_ip)
          IP=$(echo "$RAW_OUTPUT" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)
          
          if [ -z "$IP" ]; then
            echo "‚ùå ERROR: Could not extract IP address from: '$RAW_OUTPUT'"
            exit 1
          fi
          
          echo "IP_ADDRESS=$IP" >> $GITHUB_ENV
          echo "‚úÖ Server IP: $IP"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2

      # Step 10: Wait for SSH
      - name: ‚è≥ Wait for SSH
        run: |
          echo "Waiting for SSH to be available on $IP_ADDRESS..."
          for i in {1..30}; do
            if nc -z -w 5 $IP_ADDRESS 22; then
              echo "SSH is available!"
              exit 0
            fi
            echo "Attempt $i/30: SSH not ready yet..."
            sleep 10
          done
          echo "SSH failed to become available in time"
          exit 1
        env:
          IP_ADDRESS: ${{ env.IP_ADDRESS }}

      # Step 11: Deploy with Ansible - CORRECTED VERSION (Fixes SSH Permission Denied)
      - name: üöÄ Deploy with Ansible
        run: |
          # Create SSH directory and key file
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/monitor.pem
          chmod 600 ~/.ssh/monitor.pem
          
          # Wait a bit longer for SSH to be fully ready (important!)
          echo "Waiting 30 seconds for SSH to be fully ready..."
          sleep 30
          
          # Add server to known_hosts without strict checking
          ssh-keyscan -H $IP_ADDRESS >> ~/.ssh/known_hosts 2>/dev/null
          
          # Test SSH connection with more options (fixes permission denied)
          echo "Testing SSH connection with relaxed security..."
          ssh -i ~/.ssh/monitor.pem \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=30 \
              ubuntu@$IP_ADDRESS "echo 'SSH connection successful!'"
          
          # Run Ansible with disabled host key checking (fixes the issue)
          echo "Running Ansible playbook..."
          ANSIBLE_HOST_KEY_CHECKING=False \
          ansible-playbook -i "$IP_ADDRESS," ansible/playbook.yml \
            --private-key=~/.ssh/monitor.pem \
            -u ubuntu \
            -v \
            --extra-vars "ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'"
          
          echo "üéâ Deployment complete!"
          echo "üåê WordPress: http://$IP_ADDRESS"
          echo "üìä Grafana: http://$IP_ADDRESS/grafana"
        env:
          IP_ADDRESS: ${{ env.IP_ADDRESS }}

      # Step 12: Cleanup
      - name: üßπ Cleanup
        if: always()
        run: rm -f terraform/tfplan

    timeout-minutes: 30