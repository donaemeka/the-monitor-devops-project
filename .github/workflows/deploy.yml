name: 🚀 Deploy The Monitor Project

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout repo
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Setup Terraform
      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      # Step 3: Setup Ansible
      - name: 🛠️ Setup Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass

      # Step 4: Create terraform.tfvars
      - name: 📝 Create Terraform Variables File
        run: |
          mkdir -p terraform
          cat > terraform/terraform.tfvars << 'EOF'
          key_name  = "donatus"
          EOF
          echo "✅ terraform.tfvars created!"

      # Step 5: Verify AWS Key Pair Exists - FIXED SYNTAX
      - name: 🔍 Verify Key Pair
        run: |
          echo "=== Checking Key Pair in us-east-1 ==="
          aws ec2 describe-key-pairs --region us-east-1 --key-names "donatus"
          echo "✅ Key pair 'donatus' exists in us-east-1!"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      # Step 6: Terraform Init
      - name: 🔧 Terraform Init
        run: |
          terraform -chdir=terraform init \
            -backend-config="bucket=my-new-terraform-bucket" \
            -backend-config="region=us-east-1" \
            -backend-config="key=monitor-project/terraform.tfstate"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      # Step 7: Terraform Plan
      - name: 📋 Terraform Plan
        run: terraform -chdir=terraform plan -var-file="terraform.tfvars" -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      # Step 8: Terraform Apply
      - name: ✅ Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      # Step 9: Get EC2 IP
      - name: 📝 Get Server IP
        id: get-ip
        run: |
          IP=$(terraform -chdir=terraform output -raw public_ip)
          echo "IP_ADDRESS=$IP" >> $GITHUB_ENV
          echo "✅ Server IP: $IP"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      # Step 10: Wait for SSH
      - name: ⏳ Wait for SSH
        run: |
          echo "Waiting for SSH on $IP_ADDRESS..."
          for i in {1..20}; do
            if nc -z -w 5 $IP_ADDRESS 22; then
              echo "✅ SSH is available!"
              exit 0
            fi
            echo "Attempt $i/20: still waiting..."
            sleep 10
          done
          echo "❌ SSH not available in time"
          exit 1
        env:
          IP_ADDRESS: ${{ env.IP_ADDRESS }}

      # Step 11: Deploy with Ansible
      - name: 🚀 Deploy with Ansible
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/donatus.pem
          chmod 600 ~/.ssh/donatus.pem

          ssh-keyscan -H $IP_ADDRESS >> ~/.ssh/known_hosts 2>/dev/null

          echo "Testing SSH..."
          ssh -i ~/.ssh/donatus.pem -o StrictHostKeyChecking=no -o ConnectTimeout=30 ubuntu@$IP_ADDRESS "echo '✅ Connected!'"

          ansible-playbook -i "$IP_ADDRESS," ansible/playbook.yml \
            --private-key=~/.ssh/donatus.pem \
            -u ubuntu \
            -e "ansible_ssh_common_args='-o StrictHostKeyChecking=no'"
        env:
          IP_ADDRESS: ${{ env.IP_ADDRESS }}

      # Step 12: Cleanup
      - name: 🧹 Cleanup
        if: always()
        run: rm -f terraform/tfplan

    timeout-minutes: 30